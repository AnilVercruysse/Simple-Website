
var xmlhttp = new XMLHttpRequest();

// set var url to json file containing information
var url = "senators.json";

xmlhttp.onreadystatechange = function () {
    if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {

        //Parse the JSON data to a JavaScript variable. 
        var parsedObj = JSON.parse(xmlhttp.responseText, "All");
        // This function is defined below and deals with the JSON data parsed from the file. 
        displayJSON(parsedObj);
    }
};

xmlhttp.open("GET", url, true);
xmlhttp.send();
// initialise variables for use in the function to filter the table of senators by party, seniority and state
var showParty = "All";
var showSeniority = "All";
var showState = "All";
// define function to allow filtering of table. I wish I could say I used a snippet or tutorial I found elsewhere but we painfully wrote this on our own
function filter() {
    // set up variables to hold dropdown menus
    var selectParty = document.getElementById("selectParty");
    var selectState = document.getElementById("selectState");
    var selectSeniority = document.getElementById("selectSeniority");
    // assign values of variables initialised above to the selected options from the dropdown menus
    showParty = selectParty.options[selectParty.selectedIndex].value;
    showState = selectState.options[selectState.selectedIndex].value;
    showSeniority = selectSeniority.options[selectSeniority.selectedIndex].value;
    
    var xmlhttp = new XMLHttpRequest();

    // set var url to json file containing information
    var url = "senators.json";

    xmlhttp.onreadystatechange = function () {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {

            //Parse the JSON data to a JavaScript variable. 
            var parsedObj = JSON.parse(xmlhttp.responseText);
            // Invoke second function made to show data pulled from JSON file, which is identical to the first except that it only contains the table of senators, as the rest of the page does not need to be refreshed
            displayJSON2(parsedObj); showParty; showState; showSeniority;
        }
    };



    xmlhttp.open("GET", url, true);
    xmlhttp.send();

}

// function to show/hide addtional information in the senators Table
// this fucntion was taken from the w3 schools tutorialhttps://www.w3schools.com/howto/howto_js_toggle_hide_show.asp but modified to take an argument so that it would work on all the elements generated by iterating through a for loop and set so the default display was none 
function showHide(x) {
    //set up variables to allow conditional to check clicked status of extra information for all senators
    var name = "senator_" + x;
    var element = document.getElementById(name);
    // define onclick action for more or less information button 
    if (element.style.display === "block") {

        element.style.display = "none";
    } else {
        element.style.display = "block";
    }
}

// define the function to display information from the json file on the webpage, including count by party, senators with leadership roles, dropdown menus AND table of senators 
function displayJSON(obj, change) {
    //allow function to work with filter function defined above
    if (change != null) {
        filter = change;
    }

    // assign  content of objects in the json file to an object
    var senators = obj.objects;

    //initialise and populate array with possible parties in the json file, each appearing once
    var partyList = [];
    for (i = 0; i < senators.length; i++) {

        if (partyList.includes(senators[i].party) == false) {

            partyList.push(senators[i].party);
        }

    }
    // sort the array
    partyList.sort();

    //initialise and populate array with possible states, each state appearing once 
    var stateList = [];

    for (i = 0; i < senators.length; i++) {

        if (stateList.includes(senators[i].state) == false) {

            stateList.push(senators[i].state);
        }

    }
    //sort the array
    stateList.sort();

    //initialise and populate array with possible seniority, each level appearing once
    var seniorityList = [];

    for (i = 0; i < senators.length; i++) {

        if (seniorityList.includes(senators[i].senator_rank_label) == false) {

            seniorityList.push(senators[i].senator_rank_label);
        }

    }
    // sort the array
    seniorityList.sort();
    
    // set up dictionary to hold the count of members of each party
    var perParty = {};
    // add each party as a key with associated value 0 by iterating through list of parties
    for (i = 0; i < partyList.length; i++) {
        var party = partyList[i];
        var count = 0;
        // add 1 to count for each senator that is a member of the party by iterating through senators in the json file

        for (j = 0; j < senators.length; j++) {
            if (senators[j].party === partyList[i]) {
                count += 1;

            }
            // add party as key and count as value to dictionary
            perParty[partyList[i]] = count;
        }

    }

    //use the dictionary to create a table showing senator counts by party by iterating through the dictionary
    var partycounts = " <table id='table1'><tr><th>Affiliation</th><th>Number</th></tr>";
    for (var [key, value] of Object.entries(perParty)) {
        partycounts += "<tr><td>" + key + "</td><td>";
        partycounts += value + "</td></tr>";

    }
    // close table element
    partycounts += "</table>";

    // assign variable string to the html element in the page
    document.getElementById("number_of_senators").innerHTML = partycounts;

    // intiatalise a variable to hold html string for list of senators with leadership roles
    var leadership = "<ul style='list-style-type:none;'>";
    
    // iterate through partyList to display senators grouped by party
    for (j = 0; j < partyList.length; j++) {
        // initialise variable to hold current party
        var curr_party = partyList[j];
         //iterate through the array again and filter by party affiliation and whether the Senator has a leadership title. Then build unordered list in html using filtered senator attributes
        for (i = 0; i < senators.length; i++) { 
           // check if senator is in current party in list
            if (senators[i].party == curr_party) {
                // chack that senator has a leadership role
                if (senators[i].leadership_title != null) {
                    // generate html for an item in the list
                    leadership += "<li>" + senators[i].leadership_title + ": " + senators[i].person.firstname + " ";
                    if (senators[i].person.nickname != "") {
                        leadership += "\"" + senators[i].person.nickname + "\" ";
                    }
                    leadership += senators[i].person.middlename + " " + senators[i].person.lastname + " (" +
                        senators[i].party + ") <\li>";
                }

            }
        }
    }
    // close unordered list element
    leadership += "</ul>";
    // assign variable string to the html element in the page
    document.getElementById("leadership_roles").innerHTML = leadership;

    
    
    // generate dropdown menus by iterating through lists of possible party, seniority and state
    // initialise variable to hold html
    var seniorityOptions = "<option value=\"All\" >All</option>";
    // iterate through previously generates list to get options
    for (i = 0; i < seniorityList.length; i++) {

        seniorityOptions += "<option value =\"" + seniorityList[i] + "\">" + seniorityList[i] + "</option>";
    }

    // assign variable string to the html element in the page
    document.getElementById("selectSeniority").innerHTML = seniorityOptions;

    // initialise variable to hold html
    var partyOptions = "<option value=\"All\" >All</option>";
     // iterate through previously generates list to get options
    for (i = 0; i < partyList.length; i++) {

        partyOptions += "<option value =\"" + partyList[i] + "\">" + partyList[i] + "</option>";
    }

    // assign variable string to the html element in the page
    document.getElementById("selectParty").innerHTML = partyOptions;


    // initialise variable to hold html
    var stateOptions = "<option value=\"All\" >All</option>";
     // iterate through previously generates list to get options
    for (i = 0; i < stateList.length; i++) {

        stateOptions += "<option value =\"" + stateList[i] + "\">" + stateList[i] + "</option>";
    }

    // assign variable string to the html element in the page
    document.getElementById("selectState").innerHTML = stateOptions;



    //for part 4 an additional column was added to the table to contain a button to give additional information


    // initialise variable that holds html for table to contain senator information, containing heading row   html
    var sentable = "<table><tr><th>Senator</th><th>Party</th><th>State</th><th>Gender</th><th>Rank</th><th>Additional Information</th></tr>";


    // iterate through party list and through senators to populate table with senators grouped by party

    for (j = 0; j < partyList.length; j++) {

        var curr_party = partyList[j];

        for (i = 0; i < senators.length; i++) { 
            //iterate through the senators array again and pull out senator information
            if (senators[i].party == curr_party) {
                var addToTable = "<tr><td>" + senators[i].person.name + "</td>" + "<td>" + senators[i].party + "</td>" + "<td>" + senators[i].state + "</td>" + "<td>" + senators[i].person.gender_label + "</td>" + "<td>" + senators[i].senator_rank_label + "</td>"
                    //added column for part 4 for more information with button to show/hide
                    +
                    "<td> <button onclick=\"showHide(" +
                    i +
                    ")\"type=\"button\">Show more/less</button>"
                    //added div to contain information
                    +
                    "<div id = 'senator_" +
                    i +
                    "' class='default_hide'>" +
                    "Office: " + senators[i].extra.address + " <br>" +
                    "Date of birth: " + senators[i].person.birthday + "<br> " +
                    "Start date: " + senators[i].startdate + "<br>";
                // add twitter id and youtube id where available using an if statement. I made these clickable although it was not specified to do so because I thought that wouls be realistic and convenient
                if (senators[i].person.twitterid != null) {

                    addToTable += "Twitter id: <a href=\"https://twitter.com/" +
                        senators[i].person.twitterid +
                        "\" target=\"_blank\">" +
                        senators[i].person.twitterid +
                        "</a><br> ";
                }

                if (senators[i].person.youtubeid != null) {
                    addToTable += "YouTube id: <a href=\"https://www.youtube.com/" +
                        senators[i].person.youtubeid +
                        "\" target=\"_blank\">" +
                        senators[i].person.youtubeid +
                        "</a><br>";
                }

                //  clickable link for website
                addToTable += "<a href=\"" +
                    senators[i].website +
                    "\" target=\"_blank\">Website</a>" +
                    "</div></td>";
                  // use conditonals to allow dropdown menus to filter senators shown
                if ((showParty == senators[i].party || showParty == "All") &&
                    (showState == senators[i].state || showState == "All") &&
                    (showSeniority == senators[i].senator_rank_label || showSeniority == "All")) {
                    // add lines to table per filters
                    sentable += addToTable;
                }


            }
        }
    }

    // close table element after loops end
    sentable += "</table>";

       // assign variable string to the html element in the page
    document.getElementById("sen_table").innerHTML = sentable;



}

function displayJSON2(obj, change) {
    if (change != null) {
        filter = change;
    }

    // assign  content of objects in thejson file to an object
    var senators = obj.objects;

    //initialise and populate array with possible parties  
    var partyList = [];
    for (i = 0; i < senators.length; i++) {

        if (partyList.includes(senators[i].party) == false) {

            partyList.push(senators[i].party);
        }

    }
    // sort the array
    partyList.sort();

    //initialise and populate array with possible states  
    var stateList = [];

    for (i = 0; i < senators.length; i++) {

        if (stateList.includes(senators[i].state) == false) {

            stateList.push(senators[i].state);
        }

    }
    //sort the array
    stateList.sort();

    //initialise and populate array with possible seniority   
    var seniorityList = [];

    for (i = 0; i < senators.length; i++) {

        if (seniorityList.includes(senators[i].senator_rank_label) == false) {

            seniorityList.push(senators[i].senator_rank_label);
        }

    }
    // sort the array
    seniorityList.sort();
    // set up dictionary to hold the count of members of each party
    
    // table to contain senator information, heading row   
    var sentable = "<table><tr><th>Senator</th><th>Party</th><th>State</th><th>Gender</th><th>Rank</th><th>Additional Information</th></tr>";

    // iterate through party list and through senators to populate table with senators grouped by party

    for (j = 0; j < partyList.length; j++) {

        var curr_party = partyList[j];

        for (i = 0; i < senators.length; i++) { 
                  //iterate through the senators array again and pull out senator information
            if (senators[i].party == curr_party) {
                var addToTable = "<tr><td>" + senators[i].person.name + "</td>" + "<td>" + senators[i].party + "</td>" + "<td>" + senators[i].state + "</td>" + "<td>" + senators[i].person.gender_label + "</td>" + "<td>" + senators[i].senator_rank_label + "</td>"
                    //added column for part 4 for more information with button to show/hide
                    +
                    "<td> <button onclick=\"showHide(" +
                    i +
                    ")\"type=\"button\">Click to show more/less</button>"
                    //added div to contain information
                    +
                    "<div id = 'senator_" +
                    i +
                    "' class='default_hide'>" +
                    "Office: " + senators[i].extra.address + " <br>" +
                    "Date of birth: " + senators[i].person.birthday + "<br> " +
                    "Start date: " + senators[i].startdate + "<br>";
                // add twitter id and youtube id where available using an if statement. I made these clickable although it was not specified to do so because I thought that wouls be realistic and convenient
                if (senators[i].person.twitterid != null) {

                    addToTable += "Twitter id: <a href=\"https://twitter.com/" +
                        senators[i].person.twitterid +
                        "\" target=\"_blank\">" +
                        senators[i].person.twitterid +
                        "</a><br> ";
                }

                if (senators[i].person.youtubeid != null) {
                    addToTable += "YouTube id: <a href=\"https://www.youtube.com/" +
                        senators[i].person.youtubeid +
                        "\" target=\"_blank\">" +
                        senators[i].person.youtubeid +
                        "</a><br>";
                }

                //  clickable link for website
                addToTable += "<a href=\"" +
                    senators[i].website +
                    "\" target=\"_blank\">Website</a>" +
                    "</div></td>";
                // use conditonals to allow dropdown menus to filter senators shown
                if ((showParty == senators[i].party || showParty == "All") &&
                    (showState == senators[i].state || showState == "All") &&
                    (showSeniority == senators[i].senator_rank_label || showSeniority == "All")) {
 // add lines to table per filters
                    sentable += addToTable;
                }


            }
        }
    }

    // close table element after loops end
    sentable += "</table>";

   // assign variable string to the html element in the page
    document.getElementById("sen_table").innerHTML = sentable;



}

